<Window
    x:Class="CSWPFListBoxValidation.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:CSWPFListBoxValidation"
    Title="CSWPFListBoxValidation"
    Width="405"
    Height="267"
    WindowStartupLocation="CenterScreen">
    <Grid>
        <!--  Here we have provided a label, also bound to the validation rule, where we will display the validation error text if any exists.  -->
        <Label
            Name="lbValidation"
            Height="28"
            Margin="12,12,12,0"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Top">
            <Label.Content>
                <Binding Path="Validation" RelativeSource="{RelativeSource FindAncestor, AncestorType=Window}">
                    <Binding.ValidationRules>
                        <local:ListBoxValidationRule ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </Label.Content>
        </Label>

        <!--  Here is the validated list box override, a ValidatingListBox, defined in the C# code for this sample.  -->
        <local:ValidatingListBox
            x:Name="validatingListBox1"
            Margin="12,46,12,12"
            ItemsSource="{Binding}"
            SelectionChanged="ValidatingListBox_SelectionChanged"
            SelectionMode="Multiple">

            <!--
                Here we bind the ValidationListener property to the Validation property of the window, which we
                chose to use for validation in the sample.
            -->
            <local:ValidatingListBox.ValidationListener>
                <Binding Path="Validation" RelativeSource="{RelativeSource FindAncestor, AncestorType=Window}">
                    <!--
                        The ValidationRule is where the magic happens, since it decides whether the ValidatingListBox
                        is valid or not, based on the presence of error text in the Validation property of the window.
                        If it is not valid, the standard Validation UI will present the ValidatingListBox with a red
                        line around its border.
                    -->
                    <Binding.ValidationRules>
                        <local:ListBoxValidationRule ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </local:ValidatingListBox.ValidationListener>
        </local:ValidatingListBox>
    </Grid>
</Window>